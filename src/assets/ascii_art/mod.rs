type Art = &'static [(
    &'static str,
    Check,
    Option<&'static str>,
    &'static str,
    Option<[Option<&'static str>; 4]>,
)];

enum Check {
    Is,
    StartsWith,
    Contains,
}

/// ASCII art of various distros.
///
/// `_.0`: `&'static str` -- The CLI name of this art.
/// `_.1`: `Check` -- The type of comparison to make.
/// `_.2`: `Option<&'static str>` -- The `shortname` of this art, if it is different than the CLI name.
/// `_.3`: `&'static str` -- The actual string of the art.
/// `_.4`: `bool` -- if this art needs to be parsed at runtime or not.
static ASCII_ART: Art = &[
    (
        "aix",
        Check::StartsWith,
        Some("AIX"),
        include_str!("./large/a/.aix.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "alpine",
        Check::Is,
        Some("Alpine"),
        include_str!("./large/a/.alpine.clml"),
        Some([
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "alpine_small",
        Check::Is,
        None,
        include_str!("./small/a/.alpine.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;5m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;6m"),
        ]),
    ),
    (
        "alter",
        Check::StartsWith,
        Some("Alter"),
        include_str!("./large/a/.alter.clml"),
        Some([Some("\u{001b}[38;5;6m"), None, None, None]),
    ),
    (
        "amazon",
        Check::StartsWith,
        Some("Amazon"),
        include_str!("./large/a/.amazon.clml"),
        Some([
            Some("\u{001b}[38;5;3m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "amogos",
        Check::StartsWith,
        Some("AmogOS"),
        include_str!("./large/a/.amogos.clml"),
        Some([
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;4m"),
            None,
            None,
        ]),
    ),
    (
        "anarchy",
        Check::Is,
        None,
        include_str!("./large/a/.anarchy.clml"),
        Some([
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;4m"),
            None,
            None,
        ]),
    ),
    (
        "android",
        Check::StartsWith,
        Some("Android"),
        include_str!("./large/a/.android.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "android_small",
        Check::Is,
        None,
        include_str!("./small/a/.android.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "anime_ahegao",
        Check::Is,
        None,
        include_str!("./large/anime/.ahegao.clml"),
        None,
    ),
    (
        "anime_loli_smile",
        Check::Is,
        None,
        include_str!("./large/anime/.loli_smile.clml"),
        None,
    ),
    (
        "anime_loli_stare",
        Check::Is,
        None,
        include_str!("./large/anime/.loli_stare.clml"),
        None,
    ),
    (
        "anime_02",
        Check::Is,
        None,
        include_str!("./large/anime/.02.clml"),
        None,
    ),
    (
        "anime_looking",
        Check::Is,
        None,
        include_str!("./large/anime/.looking.clml"),
        None,
    ),
    (
        "antergos",
        Check::StartsWith,
        Some("Antergos"),
        include_str!("./large/a/.antergos.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;6m"),
            None,
            None,
        ]),
    ),
    (
        "antix",
        Check::StartsWith,
        Some("antiX"),
        include_str!("./large/a/.antix.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;3m"),
            None,
        ]),
    ),
    (
        "aosc_retro",
        Check::StartsWith,
        Some("AOSC OS/Retro"),
        include_str!("./large/a/.aosc_os_retro.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;3m"),
        ]),
    ),
    (
        "aosc",
        Check::StartsWith,
        Some("AOSC OS"),
        include_str!("./large/a/.aosc_os.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            None,
        ]),
    ),
    (
        "apricity",
        Check::StartsWith,
        Some("Apricity"),
        include_str!("./large/a/.apricity.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            None,
        ]),
    ),
    (
        "arco",
        Check::StartsWith,
        Some("ArcoLinux"),
        include_str!("./large/a/.arco.clml"),
        Some([
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;4m"),
            None,
            None,
        ]),
    ),
    (
        "arco_small",
        Check::Is,
        None,
        include_str!("./small/a/.arco.clml"),
        Some([
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;4m"),
            None,
            None,
        ]),
    ),
    (
        "arch_old",
        Check::Is,
        None,
        include_str!("./old/a/.arch.clml"),
        Some([
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            None,
        ]),
    ),
    (
        "arch_small",
        Check::Is,
        None,
        include_str!("./small/a/.arch.clml"),
        Some([
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            None,
        ]),
    ),
    (
        "archbox",
        Check::StartsWith,
        Some("ArchBox"),
        include_str!("./large/a/.archbox.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            None,
        ]),
    ),
    (
        "archlabs",
        Check::StartsWith,
        Some("ARCHlabs"),
        include_str!("./large/a/.archlabs.clml"),
        Some([
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
        ]),
    ),
    (
        "archstrike",
        Check::StartsWith,
        Some("ArchStrike"),
        include_str!("./large/a/.archstrike.clml"),
        Some([
            Some("\u{001b}[38;5;8m"),
            Some("\u{001b}[38;5;6m"),
            None,
            None,
        ]),
    ),
    (
        "arch",
        Check::StartsWith,
        Some("Arch"),
        include_str!("./large/a/.arch.clml"),
        Some([
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
        ]),
    ),
    (
        "artix",
        Check::StartsWith,
        Some("Artix"),
        include_str!("./large/a/.artix.clml"),
        Some([
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
        ]),
    ),
    (
        "artix_small",
        Check::Is,
        None,
        include_str!("./small/a/.artix.clml"),
        Some([
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
        ]),
    ),
    (
        "arya",
        Check::StartsWith,
        Some("Arya"),
        include_str!("./large/a/.arya.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;1m"),
            None,
            None,
        ]),
    ),
    (
        "",
        Check::StartsWith,
        Some("Ataraxia Linux"),
        "@janus",
        None,
    ),
    ("", Check::StartsWith, Some("Ataraxia"), "@janus", None),
    (
        "bedrock",
        Check::StartsWith,
        Some("Bedrock"),
        include_str!("./large/b/.bedrock.clml"),
        Some([
            Some("\u{001b}[38;5;8m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "bitrig",
        Check::StartsWith,
        Some("Bitrig"),
        include_str!("./large/b/.bitrig.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "blackarch",
        Check::StartsWith,
        Some("BlackArch"),
        include_str!("./large/b/.blackarch.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;1m"),
            Some("black"),
            Some("\u{001b}[38;5;1m"),
        ]),
    ),
    (
        "blag",
        Check::StartsWith,
        Some("BLAG"),
        include_str!("./large/b/.blag.clml"),
        Some([
            Some("\u{001b}[38;5;5m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "blankon",
        Check::StartsWith,
        Some("BlankOn"),
        include_str!("./large/b/.blankon.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;3m"),
            None,
        ]),
    ),
    (
        "bonsai",
        Check::StartsWith,
        Some("Bonsai"),
        include_str!("./large/b/.bonsai.clml"),
        Some([
            Some("\u{001b}[38;5;6m"),
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;3m"),
            None,
        ]),
    ),
    (
        "bsd",
        Check::Is,
        Some("BSD"),
        include_str!("./large/b/.bsd.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;3m"),
        ]),
    ),
    (
        "bunsenlabs",
        Check::StartsWith,
        Some("BunsenLabs"),
        include_str!("./large/b/.bunsenlabs.clml"),
        Some([Some("reset"), Some("\u{001b}[38;5;7m"), None, None]),
    ),
    (
        "calculate",
        Check::StartsWith,
        Some("Calculate"),
        include_str!("./large/c/.calculate.clml"),
        Some([
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;3m"),
            None,
            None,
        ]),
    ),
    (
        "carbs",
        Check::StartsWith,
        Some("Carbs"),
        include_str!("./large/c/.carbs.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;4m"),
        ]),
    ),
    (
        "centos",
        Check::StartsWith,
        Some("CentOS"),
        include_str!("./large/c/.centos.clml"),
        Some([
            Some("\u{001b}[38;5;3m"),
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;5m"),
        ]),
    ),
    (
        "centos_small",
        Check::Is,
        None,
        include_str!("./small/c/.centos.clml"),
        Some([
            Some("\u{001b}[38;5;3m"),
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;5m"),
        ]),
    ),
    (
        "chakra",
        Check::StartsWith,
        Some("Chakra"),
        include_str!("./large/c/.chakra.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;5m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;6m"),
        ]),
    ),
    (
        "chaletos",
        Check::StartsWith,
        Some("ChaletOS"),
        include_str!("./large/c/.chaletos.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            None,
        ]),
    ),
    (
        "chapeau",
        Check::StartsWith,
        Some("Chapeau"),
        include_str!("./large/c/.chapeau.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "chrome",
        Check::StartsWith,
        Some("Chrom"),
        include_str!("./large/c/.chrome.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;3m"),
            Some("\u{001b}[38;5;4m"),
        ]),
    ),
    (
        "cleanjaro",
        Check::StartsWith,
        Some("Cleanjaro"),
        include_str!("./large/c/.cleanjaro.clml"),
        None,
    ),
    (
        "cleanjaro_small",
        Check::Is,
        None,
        include_str!("./small/c/.cleanjaro.clml"),
        None,
    ),
    (
        "clearos",
        Check::StartsWith,
        Some("ClearOS"),
        include_str!("./large/c/.clearos.clml"),
        Some([Some("\u{001b}[38;5;2m"), None, None, None]),
    ),
    (
        "clear_linux",
        Check::StartsWith,
        Some("Clear Linux OS"),
        include_str!("./large/c/.clear_linux.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;3m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;6m"),
        ]),
    ),
    (
        "",
        Check::StartsWith,
        Some("Clear_Linux"),
        "@clear_linux",
        None,
    ),
    (
        "clover",
        Check::StartsWith,
        Some("Clover"),
        include_str!("./large/c/.clover.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;6m"),
            None,
            None,
        ]),
    ),
    (
        "condres",
        Check::StartsWith,
        Some("Condres"),
        include_str!("./large/c/.condres.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;3m"),
            Some("\u{001b}[38;5;6m"),
            None,
        ]),
    ),
    (
        "container_linux",
        Check::StartsWith,
        Some("Container Linux by CoreOS"),
        include_str!("./large/c/.container_linux.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            None,
        ]),
    ),
    (
        "",
        Check::StartsWith,
        Some("Container_Linux"),
        "@container_linux",
        None,
    ),
    (
        "crux",
        Check::StartsWith,
        Some("CRUX"),
        include_str!("./large/c/.crux.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;5m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;6m"),
        ]),
    ),
    (
        "crux_small",
        Check::Is,
        None,
        include_str!("./small/c/.crux.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;5m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;6m"),
        ]),
    ),
    ("", Check::StartsWith, Some("KISS"), "@crux_small", None),
    (
        "cucumber",
        Check::Contains,
        Some("Cucumber"),
        include_str!("./large/c/.cucumber.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;3m"),
            None,
            None,
        ]),
    ),
    (
        "debian",
        Check::StartsWith,
        Some("Debian"),
        include_str!("./large/d/.debian.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;3m"),
            None,
        ]),
    ),
    (
        "debian_small",
        Check::Is,
        None,
        include_str!("./small/d/.debian.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;3m"),
            None,
        ]),
    ),
    (
        "deepin",
        Check::StartsWith,
        Some("Deepin"),
        include_str!("./large/d/.deepin.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "desaos",
        Check::Is,
        Some("DesaOS"),
        include_str!("./large/d/.desaos.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "devuan",
        Check::StartsWith,
        Some("Devuan"),
        include_str!("./large/d/.devuan.clml"),
        Some([
            Some("\u{001b}[38;5;5m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "dracos",
        Check::StartsWith,
        Some("DracOS"),
        include_str!("./large/d/.dracos.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;3m"),
            None,
        ]),
    ),
    (
        "dragonfly",
        Check::StartsWith,
        Some("DragonFly"),
        include_str!("./large/d/.dragonfly.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;3m"),
            None,
        ]),
    ),
    (
        "dragonfly_small",
        Check::Is,
        None,
        include_str!("./small/d/.dragonfly.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;3m"),
            None,
        ]),
    ),
    (
        "dragonfly_old",
        Check::Is,
        None,
        include_str!("./old/d/.dragonfly.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;3m"),
            None,
        ]),
    ),
    (
        "drauger",
        Check::StartsWith,
        Some("Drauger"),
        include_str!("./large/d/.drauger.clml"),
        Some([
            Some("\u{001b}[38;5;1m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "elementary",
        Check::StartsWith,
        Some("Elementary"),
        include_str!("./large/e/.elementary.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            None,
        ]),
    ),
    (
        "elementary_small",
        Check::Is,
        None,
        include_str!("./small/e/.elementary.clml"),
        Some([
            Some("\u{001b}[38;5;4m"),
            Some("\u{001b}[38;5;7m"),
            Some("\u{001b}[38;5;1m"),
            None,
        ]),
    ),
    (
        "endeavouros",
        Check::StartsWith,
        Some("EndeavourOS"),
        include_str!("./large/e/.endeavouros.clml"),
        None,
    ),
    (
        "endless",
        Check::StartsWith,
        Some("Endless"),
        include_str!("./large/e/.endless.clml"),
        None,
    ),
    (
        "eurolinux",
        Check::StartsWith,
        Some("EuroLinux"),
        include_str!("./large/e/.eurolinux.clml"),
        None,
    ),
    (
        "exhuerbo",
        Check::StartsWith,
        Some("Exherbo"),
        include_str!("./large/e/.exherbo.clml"),
        None,
    ),
    (
        "fedora",
        Check::StartsWith,
        Some("Fedora"),
        include_str!("./large/f/.fedora.clml"),
        None,
    ),
    (
        "fedora_small",
        Check::Is,
        None,
        include_str!("./small/f/.fedora.clml"),
        None,
    ),
    (
        "feren",
        Check::StartsWith,
        Some("Feren"),
        include_str!("./large/f/.feren.clml"),
        None,
    ),
    (
        "freebsd",
        Check::StartsWith,
        Some("FreeBSD"),
        include_str!("./large/f/.freebsd.clml"),
        None,
    ),
    (
        "freebsd_small",
        Check::Is,
        None,
        include_str!("./small/f/.freebsd.clml"),
        None,
    ),
    (
        "freemint",
        Check::StartsWith,
        Some("FreeMiNT"),
        include_str!("./large/f/.freemint.clml"),
        None,
    ),
    (
        "frugalware",
        Check::StartsWith,
        Some("Frugalware"),
        include_str!("./large/f/.frugalware.clml"),
        None,
    ),
    (
        "funtoo",
        Check::StartsWith,
        Some("Funtoo"),
        include_str!("./large/f/.funtoo.clml"),
        None,
    ),
    (
        "galliumos",
        Check::StartsWith,
        Some("GalliumOS"),
        include_str!("./large/g/.galliumos.clml"),
        None,
    ),
    (
        "garuda",
        Check::StartsWith,
        Some("Garuda"),
        include_str!("./large/g/.garuda.clml"),
        None,
    ),
    (
        "gentoo",
        Check::StartsWith,
        Some("Gentoo"),
        include_str!("./large/g/.gentoo.clml"),
        None,
    ),
    (
        "gentoo_small",
        Check::Is,
        None,
        include_str!("./small/g/.gentoo.clml"),
        None,
    ),
    (
        "gnewsense",
        Check::StartsWith,
        Some("gNewSense"),
        include_str!("./large/g/.gnewsense.clml"),
        None,
    ),
    (
        "gnome",
        Check::StartsWith,
        Some("GNOME"),
        include_str!("./large/g/.gnome.clml"),
        None,
    ),
    (
        "gnu",
        Check::Is,
        Some("GNU"),
        include_str!("./large/g/.gnu.clml"),
        None,
    ),
    (
        "gobo",
        Check::StartsWith,
        Some("GoboLinux"),
        include_str!("./large/g/.gobo.clml"),
        None,
    ),
    (
        "grombyang",
        Check::StartsWith,
        Some("Grombyang"),
        include_str!("./large/g/.grombyang.clml"),
        None,
    ),
    (
        "haiku",
        Check::StartsWith,
        Some("Haiku"),
        include_str!("./large/h/.haiku.clml"),
        None,
    ),
    (
        "haiku_small",
        Check::Is,
        None,
        include_str!("./small/h/.haiku.clml"),
        None,
    ),
    (
        "hash",
        Check::StartsWith,
        Some("Hash"),
        include_str!("./large/h/.hash.clml"),
        Some([Some("255 123"), None, None, None]),
    ),
    (
        "huayra",
        Check::StartsWith,
        Some("Huayra"),
        include_str!("./large/h/.huayra.clml"),
        None,
    ),
    (
        "hyperbola",
        Check::StartsWith,
        Some("Hyperbola"),
        include_str!("./large/h/.hyperbola.clml"),
        None,
    ),
    (
        "hyperbola_small",
        Check::Is,
        None,
        include_str!("./small/h/.hyperbola.clml"),
        None,
    ),
    (
        "irix",
        Check::StartsWith,
        Some("IRIX"),
        include_str!("./large/i/.irix.clml"),
        None,
    ),
    (
        "janus",
        Check::StartsWith,
        Some("janusLinux"),
        include_str!("./large/j/.janus.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("janus"), "@janus", None),
    (
        "kali",
        Check::StartsWith,
        Some("Kali"),
        include_str!("./large/k/.kali.clml"),
        None,
    ),
    (
        "kaos",
        Check::StartsWith,
        Some("KaOS"),
        include_str!("./large/k/.kaos.clml"),
        None,
    ),
    (
        "kde",
        Check::StartsWith,
        Some("KDE"),
        include_str!("./large/k/.kde.clml"),
        None,
    ),
    (
        "kibojoe",
        Check::StartsWith,
        Some("Kibojoe"),
        include_str!("./large/k/.kibojoe.clml"),
        None,
    ),
    (
        "kogaion",
        Check::StartsWith,
        Some("Kogaion"),
        include_str!("./large/k/.kogaion.clml"),
        None,
    ),
    (
        "korora",
        Check::StartsWith,
        Some("Korora"),
        include_str!("./large/k/.korora.clml"),
        None,
    ),
    (
        "kslinux",
        Check::StartsWith,
        Some("KSLinux"),
        include_str!("./large/k/.kslinux.clml"),
        None,
    ),
    (
        "kubuntu",
        Check::StartsWith,
        Some("Kubuntu"),
        include_str!("./large/k/.kubuntu.clml"),
        None,
    ),
    (
        "lede",
        Check::StartsWith,
        Some("LEDE"),
        include_str!("./large/l/.lede.clml"),
        None,
    ),
    (
        "libreelec",
        Check::StartsWith,
        Some("LibreELEC"),
        include_str!("./large/l/.libreelec.clml"),
        None,
    ),
    (
        "linux",
        Check::Is,
        Some("Linux"),
        include_str!("./large/l/.linux.clml"),
        None,
    ),
    (
        "linux_classic",
        Check::Is,
        None,
        include_str!("./large/l/.linux_classic.clml"),
        None,
    ),
    (
        "linuxlite",
        Check::StartsWith,
        Some("Linux Lite"),
        include_str!("./large/l/.linuxlite.clml"),
        None,
    ),
    (
        "linuxlite_small",
        Check::Is,
        None,
        include_str!("./small/l/.linuxlite.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("Linux_Lite"),
        "@linuxlite",
        None,
    ),
    (
        "lubuntu",
        Check::StartsWith,
        Some("Lubuntu"),
        include_str!("./large/l/.lubuntu.clml"),
        None,
    ),
    (
        "lunar",
        Check::StartsWith,
        Some("Lunar"),
        include_str!("./large/l/.lunar.clml"),
        None,
    ),
    (
        "mac",
        Check::StartsWith,
        Some("mac"),
        include_str!("./large/m/.mac.clml"),
        None,
    ),
    (
        "mac_small",
        Check::Is,
        None,
        include_str!("./small/m/.mac.clml"),
        None,
    ),
    (
        "mac_modern",
        Check::Is,
        None,
        include_str!("./large/m/.mac_modern.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("Darwin"), "@mac", None),
    (
        "mageia",
        Check::StartsWith,
        Some("Mageia"),
        include_str!("./large/m/.mageia.clml"),
        None,
    ),
    (
        "mageia_small",
        Check::Is,
        None,
        include_str!("./small/m/.mageia.clml"),
        None,
    ),
    (
        "magpieos",
        Check::StartsWith,
        Some("MagpieOS"),
        include_str!("./large/m/.magpieos.clml"),
        None,
    ),
    (
        "mandriva",
        Check::StartsWith,
        Some("Mandriva"),
        include_str!("./large/m/.mandriva.clml"),
        None,
    ),
    (
        "manjaro",
        Check::StartsWith,
        Some("Manjaro"),
        include_str!("./large/m/.manjaro.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "manjaro_small",
        Check::Is,
        None,
        include_str!("./small/m/.manjaro.clml"),
        Some([
            Some("\u{001b}[38;5;2m"),
            Some("\u{001b}[38;5;7m"),
            None,
            None,
        ]),
    ),
    (
        "maui",
        Check::StartsWith,
        Some("Maui"),
        include_str!("./large/m/.maui.clml"),
        None,
    ),
    (
        "mer",
        Check::StartsWith,
        Some("Mer"),
        include_str!("./large/m/.mer.clml"),
        None,
    ),
    (
        "minux",
        Check::StartsWith,
        Some("Minux"),
        include_str!("./large/m/.minux.clml"),
        None,
    ),
    (
        "mint",
        Check::StartsWith,
        Some("Linux Mint"),
        include_str!("./large/m/.mint.clml"),
        None,
    ),
    (
        "mint_small",
        Check::Is,
        None,
        include_str!("./small/m/.mint.clml"),
        None,
    ),
    (
        "mint_old",
        Check::Is,
        None,
        include_str!("./old/m/.mint.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("LinuxMint"), "@mint", None),
    ("", Check::StartsWith, Some("mint"), "@mint", None),
    (
        "mx",
        Check::StartsWith,
        Some("MX"),
        include_str!("./large/m/.mx.clml"),
        None,
    ),
    (
        "mx_small",
        Check::Is,
        None,
        include_str!("./small/m/.mx.clml"),
        None,
    ),
    (
        "namib",
        Check::StartsWith,
        Some("Namib"),
        include_str!("./large/n/.namib.clml"),
        None,
    ),
    (
        "neptune",
        Check::StartsWith,
        Some("Neptune"),
        include_str!("./large/n/.neptune.clml"),
        None,
    ),
    (
        "netbsd",
        Check::StartsWith,
        Some("NetBSD"),
        include_str!("./large/n/.netbsd.clml"),
        None,
    ),
    (
        "netbsd_small",
        Check::Is,
        None,
        include_str!("./small/n/.netbsd.clml"),
        None,
    ),
    (
        "netrunner",
        Check::StartsWith,
        Some("Netrunner"),
        include_str!("./large/n/.netrunner.clml"),
        None,
    ),
    (
        "nitrux",
        Check::StartsWith,
        Some("Nitrux"),
        include_str!("./large/n/.nitrux.clml"),
        None,
    ),
    (
        "nixos",
        Check::StartsWith,
        Some("NixOS"),
        include_str!("./large/n/.nixos.clml"),
        None,
    ),
    (
        "nixos_small",
        Check::Is,
        None,
        include_str!("./small/n/.nixos.clml"),
        None,
    ),
    (
        "nurunner",
        Check::StartsWith,
        Some("Nurunner"),
        include_str!("./large/n/.nurunner.clml"),
        None,
    ),
    (
        "nutyx",
        Check::StartsWith,
        Some("NuTyX"),
        include_str!("./large/n/.nutyx.clml"),
        None,
    ),
    (
        "obarun",
        Check::StartsWith,
        Some("Obarun"),
        include_str!("./large/o/.obarun.clml"),
        None,
    ),
    (
        "obrevenge",
        Check::StartsWith,
        Some("OBRevenge"),
        include_str!("./large/o/.obrevenge.clml"),
        None,
    ),
    (
        "openbsd",
        Check::StartsWith,
        Some("OpenBSD"),
        include_str!("./large/o/.openbsd.clml"),
        None,
    ),
    (
        "openbsd_small",
        Check::Is,
        None,
        include_str!("./small/o/.openbsd.clml"),
        None,
    ),
    (
        "openeuler",
        Check::StartsWith,
        Some("OpenEuler"),
        include_str!("./large/o/.openeuler.clml"),
        None,
    ),
    (
        "openindiana",
        Check::StartsWith,
        Some("OpenIndiana"),
        include_str!("./large/o/.openindiana.clml"),
        None,
    ),
    (
        "openmamba",
        Check::StartsWith,
        None,
        include_str!("./large/o/.openmamba.clml"),
        None,
    ),
    (
        "openmandriva",
        Check::StartsWith,
        Some("OpenMandrivia"),
        include_str!("./large/o/.openmandriva.clml"),
        None,
    ),
    (
        "openstage",
        Check::StartsWith,
        Some("OpenStage"),
        include_str!("./large/o/.openstage.clml"),
        None,
    ),
    (
        "opensuse_small",
        Check::Is,
        None,
        include_str!("./small/o/.opensuse.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("open SUSE"), "@opensuse", None),
    (
        "opensuseleap",
        Check::StartsWith,
        Some("openSUSE Leap"),
        include_str!("./large/o/.opensuseleap.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("openSUSE_Leap"),
        "@opensuseleap",
        None,
    ),
    (
        "opensusetumbleweed",
        Check::StartsWith,
        Some("openSUSE Tumbleweed"),
        include_str!("./large/o/.opensusetumbleweed.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("openSUSE_Tumbleweed"),
        "@opensusetumbleweed",
        None,
    ),
    (
        "opensuse",
        Check::StartsWith,
        Some("openSUSE"),
        include_str!("./large/o/.opensuse.clml"),
        None,
    ),
    (
        "openwrt",
        Check::StartsWith,
        Some("OpenWrt"),
        include_str!("./large/o/.openwrt.clml"),
        None,
    ),
    (
        "osmc",
        Check::StartsWith,
        Some("Open Source Media Center"),
        include_str!("./large/o/.osmc.clml"),
        None,
    ),
    (
        "oracle",
        Check::StartsWith,
        Some("Oracle"),
        include_str!("./large/o/.oracle.clml"),
        None,
    ),
    (
        "oselbrus",
        Check::StartsWith,
        Some("OS Elbrus"),
        include_str!("./large/o/.oselbrus.clml"),
        None,
    ),
    (
        "pacbsd",
        Check::StartsWith,
        Some("PacBSD"),
        include_str!("./large/p/.pacbsd.clml"),
        None,
    ),
    (
        "parabola",
        Check::StartsWith,
        Some("Parabola"),
        include_str!("./large/p/.parabola.clml"),
        None,
    ),
    (
        "parabola_small",
        Check::Is,
        None,
        include_str!("./small/p/.parabola.clml"),
        None,
    ),
    (
        "pardus",
        Check::StartsWith,
        Some("Pardus"),
        include_str!("./large/p/.pardus.clml"),
        None,
    ),
    (
        "parrot",
        Check::StartsWith,
        Some("Parrot"),
        include_str!("./large/p/.parrot.clml"),
        None,
    ),
    (
        "parsix",
        Check::StartsWith,
        Some("Parsix"),
        include_str!("./large/p/.parsix.clml"),
        None,
    ),
    (
        "pcbsd",
        Check::StartsWith,
        Some("PCBSD"),
        include_str!("./large/p/.pcbsd.clml"),
        None,
    ),
    (
        "pclinuxos",
        Check::StartsWith,
        Some("PCLinuxOS"),
        include_str!("./large/p/.pclinuxos.clml"),
        None,
    ),
    (
        "pentoo",
        Check::StartsWith,
        Some("Pentoo"),
        include_str!("./large/p/.pentoo.clml"),
        None,
    ),
    (
        "peppermint",
        Check::StartsWith,
        Some("Peppermint"),
        include_str!("./large/p/.peppermint.clml"),
        None,
    ),
    (
        "popos",
        Check::StartsWith,
        Some("Pop!_OS"),
        include_str!("./large/p/.popos.clml"),
        None,
    ),
    (
        "popos_small",
        Check::Is,
        None,
        include_str!("./small/p/.popos.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("popos"), "@popos", None),
    ("", Check::StartsWith, Some("pop_os"), "@popos", None),
    (
        "porteus",
        Check::StartsWith,
        Some("Porteus"),
        include_str!("./large/p/.porteus.clml"),
        None,
    ),
    (
        "postmarketos",
        Check::StartsWith,
        Some("PostMarketOS"),
        include_str!("./large/p/.postmarketos.clml"),
        None,
    ),
    (
        "postmarketos_small",
        Check::Is,
        None,
        include_str!("./small/p/.postmarketos.clml"),
        None,
    ),
    (
        "proxmox",
        Check::StartsWith,
        Some("Proxmox"),
        include_str!("./large/p/.proxmox.clml"),
        None,
    ),
    (
        "puppy",
        Check::StartsWith,
        Some("Puppy"),
        include_str!("./large/p/.puppy.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("Precise Puppy"), "@puppy", None),
    (
        "",
        Check::StartsWith,
        Some("Quirky Werewolf"),
        "@puppy",
        None,
    ),
    (
        "pureos",
        Check::StartsWith,
        Some("PureOS"),
        include_str!("./large/p/.pureos.clml"),
        None,
    ),
    (
        "pureos_small",
        Check::Is,
        None,
        include_str!("./small/p/.pureos.clml"),
        None,
    ),
    (
        "qubes",
        Check::StartsWith,
        Some("Qubes"),
        include_str!("./large/q/.qubes.clml"),
        None,
    ),
    (
        "radix",
        Check::StartsWith,
        Some("Radix"),
        include_str!("./large/r/.radix.clml"),
        None,
    ),
    (
        "raspbian",
        Check::StartsWith,
        Some("Raspbian"),
        include_str!("./large/r/.raspbian.clml"),
        None,
    ),
    (
        "raspbian_small",
        Check::Is,
        None,
        include_str!("./small/r/.raspbian.clml"),
        None,
    ),
    (
        "reborn",
        Check::StartsWith,
        Some("Reborn"),
        include_str!("./large/r/.reborn.clml"),
        None,
    ),
    (
        "redstar",
        Check::StartsWith,
        Some("Red Star"),
        include_str!("./large/r/.redstar.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("RedStar"), "@redstar", None),
    (
        "redcore",
        Check::StartsWith,
        Some("Redcore"),
        include_str!("./large/r/.redcore.clml"),
        None,
    ),
    (
        "redhat",
        Check::StartsWith,
        Some("Redhat"),
        include_str!("./large/r/.redhat.clml"),
        None,
    ),
    (
        "redhat_old",
        Check::Is,
        None,
        include_str!("./old/r/.redhat.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("Red Hat"), "@redhat", None),
    ("", Check::StartsWith, Some("rhel"), "@redhat", None),
    (
        "refracteddevuan",
        Check::StartsWith,
        Some("Refracted Devuan"),
        include_str!("./large/r/.refracteddevuan.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("Refracted_Devuan"),
        "@refracteddevuan",
        None,
    ),
    (
        "regata",
        Check::StartsWith,
        Some("Regata"),
        include_str!("./large/r/.regata.clml"),
        None,
    ),
    (
        "regolith",
        Check::StartsWith,
        Some("Regolith"),
        include_str!("./large/r/.regolith.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("RFRemix"), "@fedora", None),
    (
        "rosa",
        Check::StartsWith,
        Some("Rosa"),
        include_str!("./large/r/.rosa.clml"),
        None,
    ),
    (
        "sabotage",
        Check::StartsWith,
        Some("Sabotage"),
        include_str!("./large/s/.sabotage.clml"),
        None,
    ),
    (
        "sabayon",
        Check::StartsWith,
        Some("Sabayon"),
        include_str!("./large/s/.sabayon.clml"),
        None,
    ),
    (
        "sailfish",
        Check::StartsWith,
        Some("Sailfish"),
        include_str!("./large/s/.sailfish.clml"),
        None,
    ),
    (
        "salentos",
        Check::StartsWith,
        Some("SalentOS"),
        include_str!("./large/s/.salentos.clml"),
        None,
    ),
    (
        "scientific",
        Check::StartsWith,
        Some("Scientific"),
        include_str!("./large/s/.scientific.clml"),
        None,
    ),
    (
        "septor",
        Check::StartsWith,
        Some("Septor"),
        include_str!("./large/s/.septor.clml"),
        None,
    ),
    (
        "serene",
        Check::StartsWith,
        Some("Serene"),
        include_str!("./large/s/.serene.clml"),
        None,
    ),
    (
        "sharklinux",
        Check::StartsWith,
        Some("SharkLinux"),
        include_str!("./large/s/.sharklinux.clml"),
        None,
    ),
    (
        "siduction",
        Check::StartsWith,
        Some("Siduction"),
        include_str!("./large/s/.siduction.clml"),
        None,
    ),
    (
        "slackware",
        Check::StartsWith,
        Some("Slackware"),
        include_str!("./large/s/.slackware.clml"),
        None,
    ),
    (
        "slackware_small",
        Check::Is,
        None,
        include_str!("./small/s/.slackware.clml"),
        None,
    ),
    (
        "slitaz",
        Check::StartsWith,
        Some("SliTaz"),
        include_str!("./large/s/.slitaz.clml"),
        None,
    ),
    (
        "smartos",
        Check::StartsWith,
        Some("SmartOS"),
        include_str!("./large/s/.smartos.clml"),
        None,
    ),
    (
        "solus",
        Check::StartsWith,
        Some("Solus"),
        include_str!("./large/s/.solus.clml"),
        None,
    ),
    (
        "sourcemage",
        Check::StartsWith,
        Some("Source Mage"),
        include_str!("./large/s/.sourcemage.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("Source_Mage"),
        "@sourcemage",
        None,
    ),
    (
        "sparky",
        Check::StartsWith,
        Some("Sparky"),
        include_str!("./large/s/.sparky.clml"),
        None,
    ),
    (
        "star",
        Check::StartsWith,
        Some("Star"),
        include_str!("./large/s/.star.clml"),
        None,
    ),
    (
        "steamos",
        Check::StartsWith,
        Some("SteamOS"),
        include_str!("./large/s/.steamos.clml"),
        None,
    ),
    (
        "solaris",
        Check::StartsWith,
        Some("Solaris"),
        include_str!("./large/s/.solaris.clml"),
        None,
    ),
    ("sunos", Check::StartsWith, Some("SunOS"), "@solaris", None),
    (
        "solaris_small",
        Check::Is,
        None,
        include_str!("./small/s/.solaris.clml"),
        None,
    ),
    ("sunos_small", Check::Is, None, "@solaris_small", None),
    (
        "swagarch",
        Check::StartsWith,
        Some("SwagArch"),
        include_str!("./large/s/.swagarch.clml"),
        None,
    ),
    ("suse", Check::StartsWith, Some("SUSE"), "@opensuse", None),
    ("suse_small", Check::Is, None, "@opensuse_small", None),
    (
        "t2",
        Check::StartsWith,
        None,
        include_str!("./large/t/.t2.clml"),
        None,
    ),
    (
        "tails",
        Check::StartsWith,
        Some("Tails"),
        include_str!("./large/t/.tails.clml"),
        None,
    ),
    (
        "trisquel",
        Check::StartsWith,
        Some("Trisquel"),
        include_str!("./large/t/.trisquel.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("TrueOS"), "@pcbsd", None),
    (
        "ubuntu_cinnamon",
        Check::StartsWith,
        Some("Ubuntu Cinnamon"),
        include_str!("./large/u/.ubuntucinnamon.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("Ubuntu-Cinnamon"),
        "@ubuntu_cinnamon",
        None,
    ),
    (
        "ubuntu_budgie",
        Check::StartsWith,
        Some("Ubuntu Budgie"),
        include_str!("./large/u/.ubuntubudgie.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("Ubuntu-Budgie"),
        "@ubuntu_budgie",
        None,
    ),
    (
        "ubuntu_gnome",
        Check::StartsWith,
        Some("Ubuntu GNOME"),
        include_str!("./large/u/.ubuntugnome.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("Ubuntu-GNOME"),
        "@ubuntu_gnome",
        None,
    ),
    (
        "ubuntu_mate",
        Check::StartsWith,
        Some("Ubuntu MATE"),
        include_str!("./large/u/.ubuntumate.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("Ubuntu-MATE"),
        "@ubuntu_mate",
        None,
    ),
    (
        "ubuntu_old",
        Check::Is,
        None,
        include_str!("./old/u/.ubuntu.clml"),
        None,
    ),
    (
        "ubuntu_studio",
        Check::StartsWith,
        Some("Ubuntu Studio"),
        include_str!("./large/u/.ubuntustudio.clml"),
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("Ubuntu-Studio"),
        "@ubuntu_studio",
        None,
    ),
    (
        "ubuntu_small",
        Check::Is,
        None,
        include_str!("./small/u/.ubuntu.clml"),
        None,
    ),
    (
        "ubuntu",
        Check::StartsWith,
        Some("Ubuntu"),
        include_str!("./large/u/.ubuntu.clml"),
        None,
    ),
    ("", Check::StartsWith, Some("i3buntu"), "@ubuntu", None),
    (
        "venom",
        Check::StartsWith,
        Some("Venom"),
        include_str!("./large/v/.venom.clml"),
        None,
    ),
    (
        "void",
        Check::StartsWith,
        Some("Void"),
        include_str!("./large/v/.void.clml"),
        None,
    ),
    (
        "void_small",
        Check::Is,
        None,
        include_str!("./small/v/.void.clml"),
        None,
    ),
    (
        "windows10",
        Check::Is,
        None,
        include_str!("./large/w/.windows10.clml"),
        None,
    ),
    (
        "",
        Check::Contains,
        Some("[Windows 10]"),
        "@windows10",
        None,
    ),
    (
        "",
        Check::Contains,
        Some("on Windows 10"),
        "@windows10",
        None,
    ),
    (
        "",
        Check::StartsWith,
        Some("Windows 10"),
        "@windows10",
        None,
    ),
    ("windows8", Check::Is, None, "@windows10", None),
    ("", Check::StartsWith, Some("Windows 8"), "@windows10", None),
    (
        "windows",
        Check::Is,
        None,
        include_str!("./large/w/.windows.clml"),
        None,
    ),
    (
        "xferience",
        Check::Contains,
        Some("XFerience"),
        include_str!("./large/x/.xferience.clml"),
        None,
    ),
    (
        "xubuntu",
        Check::StartsWith,
        Some("Xubuntu"),
        include_str!("./large/x/.xubuntu.clml"),
        None,
    ),
    (
        "zorin",
        Check::StartsWith,
        Some("Zorin"),
        include_str!("./large/z/.zorin.clml"),
        None,
    ),
];

pub(crate) fn get(of: &str) -> (&'static str, [Option<&'static str>; 4]) {
    for art in ASCII_ART.iter() {
        let is_alias = art.3.starts_with('@');
        let get_tuple = || -> (&'static str, [Option<&'static str>; 4]) {
            if !is_alias {
                (
                    art.3,
                    art.4
                        .unwrap_or([Some("\u{001b}[38;5;7m"), None, None, None]),
                )
            } else {
                get_cli(&art.3[1..])
            }
        };
        match art.1 {
            Check::Is => {
                if art.2.is_none() {
                    if of.to_lowercase() == art.0.to_lowercase() {
                        return get_tuple();
                    }
                } else if of.to_lowercase() == art.2.unwrap().to_lowercase() {
                    return get_tuple();
                }
            }
            Check::Contains => {
                if art.2.is_none() {
                    if of.to_lowercase().contains(&art.0.to_lowercase()) {
                        return get_tuple();
                    }
                } else if of.contains(art.2.unwrap()) {
                    return get_tuple();
                }
            }
            Check::StartsWith => {
                if art.2.is_none() {
                    if of.to_lowercase().starts_with(&art.0.to_lowercase()) {
                        return get_tuple();
                    }
                } else if of
                    .to_lowercase()
                    .starts_with(&art.2.unwrap().to_lowercase())
                {
                    return get_tuple();
                }
            }
        }
    }
    return get_cli("linux");
}

pub(crate) fn get_cli(of: &str) -> (&'static str, [Option<&'static str>; 4]) {
    for art in ASCII_ART.iter() {
        if art.0 == of {
            return (
                art.3,
                art.4
                    .unwrap_or([Some("\u{001b}[38;5;7m"), None, None, None]),
            );
        }
    }
    return get_cli("linux");
}
